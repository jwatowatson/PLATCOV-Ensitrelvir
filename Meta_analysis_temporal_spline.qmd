---
title: "Generic arm analysis"
author: "James Watson"
format: html
editor: visual
---

```{r preambule}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r setup}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(scales)
library(ggplot2)
library(cowplot)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 5.5
RUN_MODELS = F
add_epoch = T # if using non-concurrent controls

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('user_settings.R')
trt_colors = get_trt_colors()
```

All paths are local

## Load data

Set up analysis

```{r load_data}
intervention = 'Unblinded_all' 
ref_arm = 'No study drug'
study_threshold = 1.2
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
itt_population_all = read_csv('ITT_population_meta.csv')

f_name = paste0('Analysis_Data/',intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']='Nirmatrelvir'
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

# if(!all(platcov_dat$ID %in% itt_population_all$ID)) {(print(unique(platcov_dat$ID)[which(!unique(platcov_dat$ID) %in% itt_population_all$ID)]))}

for(tt in unique(trt_intervention)){
  writeLines(sprintf('Missing patients in %s arm:',tt))
  print(itt_population_all$ID[itt_population_all$Treatment==tt &
                                !itt_population_all$ID %in% platcov_dat$ID])
}
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
trt_colors = trt_colors[trt_intervention]
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

## Baseline characteristics

```{r baseline}
#| echo: false
platcov_dat = platcov_dat %>% ungroup() %>% 
  mutate(Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time_normal = Study_time,
         Study_time = scale(Study_time),
         ) %>% 
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT_NS),
         Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         trt_color = 
           as.character(plyr::mapvalues(Trt,
                                        from = names(trt_colors),
                                        to = trt_colors))
  )

Baseline_data = platcov_dat %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)

tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', "Weight",
                    "Baseline.viral.load",'Sex',
                    'Symptom_onset','Vaccinated'),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
# save_kable(tab.ff,file = 'Baseline_characteristics.png')
```

## Fit models

```{r}
#| echo: false
source('priors.R')

covs_base = c('Site') #'Study_time'
covs_full=c(covs_base, 'Age_scaled','Symptom_onset','N_dose','Sex')

# Analysis data
platcov_dat_analysis_list = list()
stan_inputs = list()
i<-1

  platcov_dat_analysis_list[[i]] = 
  platcov_dat %>% ungroup() %>%
  filter(mITT, Time <= Dmax) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 
  
writeLines(sprintf('Analysis dataset for follow-up duration of %s days contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   max(floor(platcov_dat_analysis_list[[i]]$Time)),
                   length(unique(platcov_dat_analysis_list[[i]]$ID)),
                   nrow(platcov_dat_analysis_list[[i]]),
                   sum(platcov_dat_analysis_list[[i]]$CT_NS<40),
                   round(100*mean(platcov_dat_analysis_list[[i]]$CT_NS<40))))

stan_inputs[[i]] = 
  make_stan_inputs_temporal_splines(input_data_fit = platcov_dat_analysis_list[[i]],
                   int_covs_base = covs_base,
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'), #'~ Trt'
                   Dmax = Dmax)
  
```

```{r setup_models}
all_mods = c("Stan_models/Temporal_spline_proportional_2.stan")#,
             #"Stan_models/Temporal_spline_additive.stan")

num_knots <- 20 #seq(20,100,20)
spline_degree <- 4#4:20

model_settings = expand.grid(mod = all_mods,
                             prior = 1,
                             cov_matrices = 1, 
                            # dataset = 1:2,
                             Dmax = Dmax,
                             num_knots_alpha = num_knots,
                             spline_degree_alpha = spline_degree)

model_settings$num_knots_beta =  model_settings$num_knots_alpha
model_settings$spline_degree_beta = model_settings$spline_degree_alpha
model_settings$dataset <- 1
#model_settings$dataset[model_settings$Dmax == Dmax[2]] <- 2

model_settings$Niter = 4000/2
model_settings$Nwarmup = 2000/2
model_settings$Nthin = 4/2
model_settings$Nchain = 4

model_settings$intervention <- intervention

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis_list,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla 01_run_local_temporal_splines_analysis.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = paste0('model_fits_temporal_spline'),)
ff = ff[grep(pattern = 'model_fits_',x = ff, ignore.case = T)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

## main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

model_cols = brewer.pal(n = 8, name = 'Dark2')[1:nrow(model_settings)]
names(model_cols) = paste('model', 1:nrow(model_settings))
```

```{r get_effects}
effect_ests=list()
for(i in 1:length(ff)){
  load(ff[i])
  effect_ests[[i]] = 
    summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]
  rownames(effect_ests[[i]]) = trts
}
effect_ests
```
