---
title: "Generic arm analysis"
author: "James Watson"
format: html
editor: visual
---

```{r preambule}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r setup}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(scales)
library(ggplot2)
library(cowplot)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 5.5
RUN_MODELS = F
add_epoch = T # if using non-concurrent controls

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('user_settings.R')
trt_colors = get_trt_colors()

interim_version <- "v10"
```

All paths are local

## Load data

Set up analysis

```{r load_data}
intervention = 'Ensitrelvir' 
ref_arm = 'Nirmatrelvir'
study_threshold = 0.9
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
itt_population_all = read_csv('ITT_population_all.csv')

f_name = paste0('Analysis_Data/',intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']='Nirmatrelvir'
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

for(tt in unique(trt_intervention)){
  writeLines(sprintf('Missing patients in %s arm:',tt))
  print(itt_population_all$ID[itt_population_all$Treatment==tt &
                                !itt_population_all$ID %in% platcov_dat$ID])
}
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

## Baseline characteristics

```{r baseline}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT_NS)) %>% 
  ungroup() %>%
  mutate(Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         # Variant = as.factor(Variant),
         trt_color = 
           as.character(plyr::mapvalues(Trt,
                                        from = names(trt_colors),
                                        to = trt_colors)),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) #normalise
  )

Baseline_data = platcov_dat %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)

tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', "Weight",
                    "Baseline.viral.load",'Sex',
                    'Symptom_onset','Vaccinated'),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
# save_kable(tab.ff,file = 'Baseline_characteristics.png')
```

```{r}
platcov_PCR_status = platcov_dat %>% 
  distinct(ID, Timepoint_ID, .keep_all = T) %>%
  arrange(ID, Time)
table(Baseline_data$mITT)
table(platcov_PCR_status$Timepoint_ID)
table(itt_population_all$Treatment %in% c('Nirmatrelvir + Ritonavir',
                                          'No study drug',
                                          'Ensitrelvir'))
```

## Rebounds

```{r}
platcov_dat_rebound = find_rebounds(platcov_dat =  platcov_dat %>% filter(mITT),
                                    lower_bound = 2, 
                                    upper_bound = 3,
                                    t_window = 1.5)

platcov_dat_rebound$clear_check <- "Less than 100"
platcov_dat_rebound$clear_check[platcov_dat_rebound$daily_VL >= log10(100)] <- "More than 100"
platcov_dat_rebound$clear_check[platcov_dat_rebound$daily_VL >= log10(1000)] <- "More than 1000"
```

```{r}
platcov_dat_rebound$Timepoint_ID <- as.factor(platcov_dat_rebound$Timepoint_ID)


library(tidyr)
library(cluster)

wide_dat <- as.data.frame(spread(unique(platcov_dat_rebound[,c("ID", "Timepoint_ID", "clear_check")]), key = Timepoint_ID, value = clear_check))
row.names(wide_dat) <- wide_dat[,1]
wide_dat <- wide_dat[,-1]

wide_dat[sapply(wide_dat, is.character)]  <- lapply(wide_dat[sapply(wide_dat, is.character)], as.factor)
colnames(wide_dat) <- paste0("Day_", colnames(wide_dat))

# create a dissimilarity matrix 
disimilarAdData <- daisy(wide_dat)

# hierarchically cluster by dissimilarity
clusteredAdData <- agnes(disimilarAdData)

# reorder the rows by dissimilarity
orderedAdData <- wide_dat[clusteredAdData[[1]], ]


platcov_dat_rebound$ID <- as.factor(platcov_dat_rebound$ID)
platcov_dat_rebound$ID <- factor(platcov_dat_rebound$ID, levels = row.names(orderedAdData))

platcov_dat_rebound$Trt2 <- platcov_dat_rebound$Trt
#levels(platcov_dat_rebound$Trt2) <- c("NSD", "ENS", "NIR")


#png("plot.png", width = 6, height = 8, units = "in", res = 350)
ggplot(platcov_dat_rebound %>% filter(rebound == T#, 
                                      # Trt %in% c("Nirmatrelvir + Ritonavir",
                                      #                          "Ensitrelvir",
                                      #                          "Nirmatrelvir + Ritonavir + Molnupiravir")
                                      ), 
       aes(y = ID, x = Timepoint_ID, fill = clear_check)) +
  geom_tile(col = "white", linewidth = 0.75) +
  facet_grid(Trt ~ ., scales = "free", space='free') +
  scale_fill_manual(values = rev(c("#B80000", "#F6D776", "#86A7FC")), name = "Viral loads \n(genomes per mL)") +
  theme_bw() +
  xlab("Time since randomisation (days)") +
  ylab("")+
  theme(axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 10, face = "bold"))

#dev.off()

#write.csv(platcov_dat_rebound, "data_rebound_check.csv", row.names = F)
###############################################################################

```

```{r}
rebound_ID <- platcov_dat_rebound %>% filter(rebound) %>%
  select(ID, Trt) %>%
  distinct() 
rebound_ID
```

```{r}
platcov_dat_rebound_d0 <- platcov_dat_rebound %>%
  group_by(ID) %>%
  arrange(Time) %>%
  filter(row_number()==1, mITT)

platcov_dat_rebound_d0$Rand_date <- as.Date(platcov_dat_rebound_d0$Rand_date)
#png("time_rebound.png", width = 10, height = 6, units = "in", res = 350)
ggplot(platcov_dat_rebound_d0 , aes(x = Rand_date, y = Trt, col = rebound, size = rebound)) +
  geom_point(alpha = 0.5) +
  theme_bw() +
  scale_color_manual(values = c("gray", "red"), guide="none") +
  scale_size_manual(values = c(3,5), guide="none") +
  geom_vline(xintercept = seq.Date(as.Date("2020-09-30"), as.Date("2024-01-01"), "12 months"),
             col = "red", linetype = "dashed") +
  scale_x_date(date_labels =  "%b %y", breaks = seq.Date(as.Date("2021-01-01"), as.Date("2024-01-01"), "4 months"))+
  theme(axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        axis.text = ggtext::element_markdown(size = 12),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.text=element_text(size=10),
        plot.title = element_text(size = 15, face = "bold"),
        legend.position='bottom') +
  scale_y_discrete(drop = F) +
  xlab("") +
  ylab("")
#dev.off()
```

## Fit models

```{r}
#| echo: false
source('priors.R')

# Analysis data
platcov_dat_analysis = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax, mITT, Timepoint_ID < ceiling(Dmax)) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Epoch = paste(month(Rand_date), year(Rand_date), sep = '_'),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 


writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(platcov_dat_analysis$ID)),
                   nrow(platcov_dat_analysis),
                   sum(platcov_dat_analysis$CT_NS<40),
                   round(100*mean(platcov_dat_analysis$CT_NS<40))))

covs_base = c('Site','Study_time')
covs_full=c(covs_base, 'Age_scaled','Symptom_onset')
stan_inputs = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis,
                   int_covs_base = c(covs_base,'Symptom_onset'),
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   epoch = add_epoch,
                   Dmax = Dmax)
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

model_settings = expand.grid(mod = 'Stan_models/Linear_model_RNaseP.stan',
                             prior = 1,
                             cov_matrices = 1)

model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = paste0(intervention,'.RData'),)
ff = ff[grep(pattern = 'model_fits_',x = ff, ignore.case = T)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

## main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

model_cols = brewer.pal(n = 8, name = 'Dark2')[1:nrow(model_settings)]
names(model_cols) = paste('model', 1:nrow(model_settings))
```

```{r get_effects}
effect_ests=list()
for(i in 1:length(ff)){
  load(ff[i])
  effect_ests[[i]] = 
    summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]
  rownames(effect_ests[[i]]) = trts
}
```

## Plot viral dynamics

```{r viral_kinetics, fig.width=10, fig.height=8}
G1_box <- plot_vl_box(dataplot = platcov_dat_analysis, trt_colors = trt_colors)
G1_box
```

## Plot half-life

```{r}
slopes = rstan::extract(out, pars='slope')$slope
analysis_data_stan = stan_inputs$analysis_data_stan
t12_output = data.frame(t_12_med = 24*log10(.5)/apply(slopes,2,mean),
                        t_12_up = 24*log10(.5)/apply(slopes,2,quantile,.9),
                        t_12_low = 24*log10(.5)/apply(slopes,2,quantile,.1),
                        slope_median = apply(slopes,2,median),
                        ID_stan = analysis_data_stan$id[analysis_data_stan$ind_start])
t12_output = merge(t12_output, stan_inputs$ID_map, by = 'ID_stan')



Half_life <- t12_output
# for(i in 1:nrow(stan_inputs$ID_map)){
#   slopes <- rstan::extract(out, paste0("slope[", i, "]"))[[1]]
#   hl <- slope_to_hl(slopes)
#   summary_hl <- data.frame("ID_stan" = i,
#                            "low" = quantile(hl, 0.1),
#                            "med" = mean(hl),
#                            "high" = quantile(hl, 0.9))
#   Half_life <- rbind(Half_life, summary_hl)
# }
# Half_life <- merge(stan_inputs$ID_map, Half_life, by = "ID_stan")

Half_life <- platcov_dat_analysis %>%
  distinct(ID, Trt) %>%
  merge(Half_life, by.x = "ID", by.y = "ID_key") %>%
  arrange(Trt, t_12_med)

Half_life$ID <- as.factor(Half_life$ID)
Half_life$ID <- factor(Half_life$ID, levels = Half_life$ID)
Half_life
```

```{r half_lives}
G_hl <- plot_hl(Half_life, trt_colors)
G_hl
```

## Plot treatment effects

```{r treatment_effect}
G2 <- plot_trt_effs(effect_ests = effect_ests)
G2
```

## Summarize treatment effect

```{r}
effect_ests_rep <- as.data.frame(do.call("rbind", effect_ests))
effect_ests_rep <- formatter(exp(effect_ests_rep))

for(i in 1:nrow(effect_ests_rep)){
  writeLines(sprintf('Estimated treatment effect of %s relative to %s is %s%% [95%% CrI: %s to %s %%]', 
                     rownames(effect_ests_rep)[i],
                     ref_arm,
                     round(effect_ests_rep[i, 3],1),
                     round(effect_ests_rep[i, 1],1),
                     round(effect_ests_rep[i, 5],1)
  )
  )
}
```

```{r coef_plot}
coef_to_plot=1
coef_model = 1 
load(ff[coef_model])
par(las=1, mfrow=c(1,2), mar=c(5,7,2,2))
plot_coef_effects(stan_out = out,cov_mat = coef_to_plot,stan_inputs = stan_inputs)
```

## Rebound

```{r rebound_visual_assessment}
IDs_analysis = unique(platcov_dat_analysis$ID)

platcov_dat_rebound = platcov_dat%>% filter(ID %in% IDs_analysis)
platcov_dat_rebound = find_rebounds(platcov_dat = platcov_dat_rebound,
                            lower_bound = 2, 
                            upper_bound = 3,
                            t_window = 1.5)

print(unique(platcov_dat_rebound$ID[platcov_dat_rebound$rebound==1]))
par(mfrow=c(3,1), las=1, cex.lab=1.3, cex.axis=1.3)
platcov_dat_rebound = platcov_dat_rebound %>% filter(rebound==1)
for(tt in unique(platcov_dat_rebound$Trt)){
  xx = platcov_dat_rebound %>% filter(Trt==tt)
  plot(xx$Time, xx$daily_VL, panel.first=grid(),
       xlab='Time since randomisation (days)', ylab = 'SARS CoV2 genomes/mL',
       ylim = range(platcov_dat$daily_VL), xlim=c(0,15),
       col = xx$trt_color, yaxt='n')
    axis(2, at = c(2,4,6,8), labels = c(expression(10^2),
                                        expression(10^4),
                                        expression(10^6),
                                        expression(10^8)))
    abline(h=c(2,3), lty=2)
  title(paste0(tt,' (n=',length(unique(xx$ID)),'/',
               length(unique(platcov_dat_analysis$ID[platcov_dat_analysis$Trt==tt])),')'))
  for(id in unique(xx$ID)){
    xx_id = xx%>%filter(ID==id)
    lines(xx_id$Time, xx_id$daily_VL, col = adjustcolor(xx_id$trt_color,alpha.f = .6))
  }
}

```
