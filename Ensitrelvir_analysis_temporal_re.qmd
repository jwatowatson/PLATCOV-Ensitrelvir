---
title: "Generic arm analysis"
author: "James Watson"
format: html
editor: visual
---

```{r preambule}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r setup}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(scales)
library(ggplot2)
library(cowplot)
library(ggpubr)
library(grid)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 5.5
RUN_MODELS = F
add_epoch = F # if using non-concurrent controls

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('user_settings.R')
trt_colors = get_trt_colors()
```

All paths are local

## Load data

Set up analysis

```{r load_data}
intervention = 'Unblinded_meta' ; ref_arm = 'No study drug'; study_threshold = 1.2
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
itt_population_all = read_csv('ITT_population_all.csv')

f_name = paste0('Analysis_Data/',intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']='Nirmatrelvir'
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

# if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

for(tt in unique(trt_intervention)){
  writeLines(sprintf('Missing patients in %s arm:',tt))
  print(itt_population_all$ID[itt_population_all$Treatment==tt &
                                !itt_population_all$ID %in% platcov_dat$ID])
}
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

## Baseline characteristics

```{r baseline}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT_NS)) %>% 
  ungroup() %>%
  mutate(Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         # Variant = as.factor(Variant),
         trt_color = 
           as.character(plyr::mapvalues(Trt,
                                        from = names(trt_colors),
                                        to = trt_colors)),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) #normalise
  )

Baseline_data = platcov_dat %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)

tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', "Weight",
                    "Baseline.viral.load",'Sex',
                    'Symptom_onset','Vaccinated'),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
# save_kable(tab.ff,file = 'Baseline_characteristics.png')
```

```{r}
nperiod <- 10
quant <- quantile(Baseline_data$Rand_date, seq(0,1,1/nperiod))

platcov_dat <- platcov_dat %>% 
  mutate(period_id = cut(Rand_date, breaks = quant, include.lowest = TRUE, labels = FALSE)) 
```

```{r}
# platcov_PCR_status = platcov_dat %>% 
#   distinct(ID, Timepoint_ID, .keep_all = T) %>%
#   arrange(ID, Time)
# table(Baseline_data$mITT)
# table(platcov_PCR_status$Timepoint_ID)
# table(itt_population_all$Treatment %in% c('Nirmatrelvir + Ritonavir',
#                                           'No study drug',
#                                           'Ensitrelvir'))
```

```{r}
baseline_VL_summary <- Baseline_data %>%
  filter(mITT) %>%
  group_by(Trt) %>%
  summarise(mean = mean(daily_VL),
            sd = sd(daily_VL),
            median = median(daily_VL),
            Q1 = quantile(daily_VL, 0.25),
            Q3 = quantile(daily_VL, 0.75)) 

for(i in 1:nrow(baseline_VL_summary)){
  writeLines(sprintf('Mean and standard deviation of baseline viral loads in %s arm is %s (%s)', 
                     baseline_VL_summary$Trt[i],
                     round(baseline_VL_summary$mean[i],1),
                     round(baseline_VL_summary$sd[i],1)
  )
  )
}
```

## Summarising baseline viral loads

```{r}
# G_baseline_VL <- ggplot(Baseline_data %>% distinct(ID, .keep_all = T), aes(x = Trt, y = daily_VL)) +
#   geom_jitter(aes(col = Trt), size = 2.5, alpha = 0.5, width = 0.2) +
#   geom_boxplot(aes(fill = Trt), width = 0.3, outlier.shape = NA, alpha = 0.5, size = 0.75) +
#   theme_bw(base_size = 14) +
#   xlab("") +
#   ylab("Admission SARS-CoV-2 genomes/mL") +
#   theme(legend.position = "none",
#         axis.title  = element_text(face  = "bold")) +
#   scale_color_manual(values = trt_colors[c(trts, ref_arm)]) +
#   scale_fill_manual(values = trt_colors[c(trts, ref_arm)])    + 
#   scale_y_continuous(labels=label_math(), breaks = seq(0,10,2), limits = c(0,9)) 
# 
# G_baseline_VL
```

```{r}
# f_name <- paste("Plots/baseline_vl.pdf")
# 
# pdf(f_name, width = 6, height = 5)
# G_baseline_VL
# dev.off()
```

## Fit models

```{r}
#| echo: false
source('priors.R')

# Analysis data
platcov_dat_analysis = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax, mITT, Timepoint_ID < ceiling(Dmax)) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Epoch = paste(month(Rand_date), year(Rand_date), sep = '_'),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 


writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(platcov_dat_analysis$ID)),
                   nrow(platcov_dat_analysis),
                   sum(platcov_dat_analysis$CT_NS<40),
                   round(100*mean(platcov_dat_analysis$CT_NS<40))))

covs_base = c('Site') #,'Study_time'
covs_full=c(covs_base, 'Age_scaled','Symptom_onset')
stan_inputs = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis,
                   int_covs_base = c(covs_base,'Symptom_onset'),
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   epoch = add_epoch,
                   Dmax = Dmax)

stan_inputs$analysis_data_stan$period_id <- platcov_dat_analysis$period_id
stan_inputs$analysis_data_stan$n_period <- length(unique(stan_inputs$analysis_data_stan$period_id))
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

model_settings = expand.grid(mod = "Stan_models/Linear_model_temporal_RE.stan",
                             prior = 1,
                             cov_matrices = 1)

model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
#model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')

save(model_settings, 
     platcov_dat_analysis,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
#if(ref_arm == "No study drug"){intervention <- paste0(intervention, "_vs_NSD")}

ff = list.files('Rout/', pattern = paste0(intervention,'.RData'),)
ff = ff[grep(pattern = 'model_fits_',x = ff, ignore.case = T)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

## main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

model_cols = brewer.pal(n = 8, name = 'Dark2')[1:nrow(model_settings)]
names(model_cols) = paste('model', 1:nrow(model_settings))
```

```{r get_effects}
effect_ests=list()
for(i in 1:length(ff)){
  load(ff[i])
  effect_ests[[i]] = 
    summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]
  rownames(effect_ests[[i]]) = trts
}
```

## Plot viral dynamics

```{r viral_kinetics, fig.width=10, fig.height=8}
# G1_box <- plot_vl_box(dataplot = platcov_dat_analysis, trt_colors = trt_colors)
# G1_box
```

```{r}
G1_vl <- plot_vl(dataplot = platcov_dat_analysis, trt_colors)
G1_vl
```

```{r}
platcov_dat_analysis %>%
  group_by(Trt, Timepoint_ID) %>%
  summarise(median_vl = median(daily_VL)) %>%
  filter(Timepoint_ID == 4)
```

```{r}
# f_name <- paste("Plots/viral_dynamics.pdf")
# 
# pdf(f_name, width = 6, height = 6)
# G1_vl
# dev.off()
```

## Plot half-life

```{r}
slopes = rstan::extract(out, pars='slope')$slope
slope_period = rstan::extract(out, pars='slope_period')$slope_period

analysis_data_stan = stan_inputs$analysis_data_stan
t12_output = data.frame(t_12_med = 24*log10(.5)/apply(slopes,2,median),
                        t_12_up = 24*log10(.5)/apply(slopes,2,quantile,.9),
                        t_12_low = 24*log10(.5)/apply(slopes,2,quantile,.1),
                        
                        slope_median = apply(slopes,2,median),
                        slope_low = apply(slopes,2,quantile,.1),
                        slope_up = apply(slopes,2,quantile,.9),

                        slope_period_median = apply(slope_period, 2, median),
                        slope_period_low = apply(slope_period, 2, quantile, .1),
                        slope_period_up = apply(slope_period, 2, quantile, .9),

                        ID_stan = analysis_data_stan$id[analysis_data_stan$ind_start])
t12_output = merge(t12_output, stan_inputs$ID_map, by = 'ID_stan')

Half_life <- t12_output

Half_life <- platcov_dat_analysis %>%
  distinct(ID, Trt, .keep_all = T) %>%
  merge(Half_life, by.x = "ID", by.y = "ID_key") %>%
  arrange(Trt, t_12_med)

Half_life$ID <- as.factor(Half_life$ID)
Half_life$ID <- factor(Half_life$ID, levels = Half_life$ID)
Half_life
```

```{r}
Half_life %>%
  group_by(Trt) %>%
  summarise(med = median(t_12_med),
            Q1 = quantile(t_12_med, 0.25),
            Q3 = quantile(t_12_med, 0.75))
```

```{r}
write.csv(Half_life, 'meta_analysis_estimates.csv', row.names = F)
```

```{r}
G2_hl <- plot_hl(Half_life, trt_colors)
G2_hl
```

```{r}
G3_trt_effect <- plot_trt_effs(effect_ests)
G3_trt_effect
```

```{r}
slope_baseline <- Half_life$slope_period_median[Half_life$Rand_date == min(Half_life$Rand_date)][1]

G4 <- ggplot(Half_life, aes(x = Rand_date)) +
  geom_point(aes(y = slope_median, col = Trt), alpha = 0.55, size = 2.5) +
  geom_hline(yintercept = slope_baseline, linetype = "dashed") +
  geom_hline(yintercept = 0, linetype = "dashed", col = "red") +
  geom_line(aes(y = slope_period_median, group = period_id), col = "black", linewidth = 1.4, alpha = 0.8) +
  theme_bw(base_size = 12) +
  xlab("Randomisation date") +
  ylab("Viral clearance rates (log10 genomes/day)") +
  scale_color_manual(values = trt_colors, name = "") +
  theme(axis.title = element_text(face = "bold"),
        legend.position = "right") 
G4
```

```{r}
png(paste0("Plots/meta_analysis_effects_", nperiod, "_periods.png"), width = 6, height = 5, unit = "in", res = 300)
G3_trt_effect + ggtitle("")
dev.off()
```

```{r}
png(paste0("Plots/meta_analysis_slopes_", nperiod, "_periods.png"), width = 8, height = 5, unit = "in", res = 300)
G4
dev.off()
```

```{r}
# f_name <- paste("Plots/trt_eff.pdf")
# lab_ref <- ref_arm
# lab_ref[lab_ref == "Nirmatrelvir"] <- "Ritonavir-boosted nirmatrelvir"
# 
# pdf(f_name, width = 6, height = 5)
# G3_trt_effect + ggtitle(paste0("Estimated treatment effects \nrelative to ", tolower(lab_ref), " arm"))
# dev.off()
```

```{r}
f_name <- paste("Plots/hl_trt_eff.pdf")

pdf(f_name, width = 10, height = 5)
plot_grid(G2_hl, G3_trt_effect, ncol = 2, nrow = 1, align = "h")
dev.off()
```

## Summarize treatment effect

```{r}
effect_ests_rep <- as.data.frame(do.call("rbind", effect_ests))
effect_ests_rep <- formatter(exp(effect_ests_rep))

for(i in 1:nrow(effect_ests_rep)){
  writeLines(sprintf('Estimated treatment effect of %s relative to %s is %s%% [95%% CrI: %s to %s %%]', 
                     rownames(effect_ests_rep)[i],
                     ref_arm,
                     round(effect_ests_rep[i, 3],0),
                     round(effect_ests_rep[i, 1],0),
                     round(effect_ests_rep[i, 5],0)
  )
  )
}
```

```{r}
trt_effects <- rstan::extract(out, 'trt_effect')$trt_effect
sum(formatter(exp(trt_effects[,1])) < formatter(study_threshold))/nrow(trt_effects)
```

